name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  packages: write
  contents: read

jobs:
  push-docker-ghcr:
    name: Build and Push to GHCR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      # I don't need to keep track of previous versions, so I just use latest
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest

  deploy:
      # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: push-docker-ghcr
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          # these were set up using the following guide: https://github.com/google-github-actions/auth#setting-up-workload-identity-federation
          # no idea how this is better 
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com
      
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: server
          image: ghcr.io/${{ github.repository }}:latest
          region: northamerica-northeast2 # low carbon!

      - name: Use output
        run: 'curl "${{ steps.deploy.outputs.url }}"'